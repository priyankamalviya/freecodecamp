function uniteUnique(arr1, arr2, arr3) {
 var newArr;
 //Convert the arguments object into an array
  var args = Array.prototype.slice.call(arguments);
  //Use reduce function to flatten the array
  newArr = args.reduce(function(arrA,arrB){
  //Apply filter to remove the duplicate elements in the array
    return arrA.concat(arrB.filter(function(i){
      return arrA.indexOf(i) === -1;
    }));
  });

   return newArr;                    
}

// test here
uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);

/* version:2 July 9, 2017 */

/* esversion:6 */
function uniteUnique(arr1, arr2, arr3) {
  let args = Array.prototype.slice.call(arguments);
  let finalArr = [];
  finalArr = args.reduce(function(arr1, arr2){
    return arr1.concat(arr2.filter(function(item){
      return arr1.indexOf(item) === -1;
    }));       
  });
  
  
  return finalArr;
}

uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);
